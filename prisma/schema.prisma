generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  RECRUITER
  APPLICANT
}

enum Status {
  COMPLETED
  IN_PROGRESS
  PENDING
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CODING
}

model User {
  id            String     @id @default(uuid())
  userName      String
  email         String     @unique
  password      String
  role          Role?      @default(APPLICANT)
  accessToken   String?
  refreshToken  String?

  createdAt     DateTime   @default(now())

  jobs          Job[]      @relation("recruiterJobs")
  resume        Resume[]
  interviews    Interview[]
}

model Job {
  id            String     @id @default(uuid())
  title         String
  description   String
  recruiterId   String
  questionConfig Json?     // e.g., { "TEXT": 3, "CODING": 2 }
  createdAt     DateTime   @default(now())

  recruiter     User       @relation("recruiterJobs", fields: [recruiterId], references: [id])
  interviews    Interview[]
}

model Resume {
  id            String     @id @default(uuid())
  userId        String     @unique
  fileUrl       String
  parsedText    String?
  analysis      Json?

  createdAt     DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id])
  interviews    Interview[]
}

model Interview {
  id            String     @id @default(uuid())
  userId        String
  jobId         String?
  resumeId      String?
  status        Status     @default(PENDING)

  // Final evaluation moved here
  totalScore    Float?
  feedback      String?
  categories    Json?      

  user          User       @relation(fields: [userId], references: [id])
  job           Job?       @relation(fields: [jobId], references: [id])
  resume        Resume?    @relation(fields: [resumeId], references: [id])
  answers       Answer[]
}

model Answer {
  id            String        @id @default(uuid())
  interviewId   String
  text          String        // Question text
  type          QuestionType
  expectedAnswer String?      // For AI evaluation
  answerText    String?       // Candidateâ€™s answer
  score         Float?        // AI/Recruiter score
  feedback      String?       // Feedback for this question

  createdAt     DateTime      @default(now())

  interview     Interview     @relation(fields: [interviewId], references: [id])
}
